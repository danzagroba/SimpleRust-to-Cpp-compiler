fn function_with_params(mut a: f32, mut b: f32, mut c: bool) -> f32 {
    if (c == true) {
        return a;
    }
    return a + b;
}

fn function_no_params() -> bool {
    let mut x: i32 = 5;
    let mut y: i32 = 5;
    return x == y;
}

fn usingparameters(mut xyz: i32, mut asd: bool) -> bool
{
    if(asd == true && xyz > 10)
    {
        return true;
    }
    print!(xyz);
    return false;
}


fn main() {
    let mut i: i32 = 10;
    let mut f: f32 = 2.5;
    let mut bb: bool = true;
    let mut uninitialized_var: i32;
    uninitialized_var = 100;

    function_with_params(f, 3.4, bb);

    bb = function_no_params();

    usingparameters(i, bb);

    let mut arr_i: [i32; 5];
    let mut arr_f: [f32; 2];
    let mut arr_b: [bool; 3];
    
    arr_i[0] = 1;
    arr_i[4] = 2;
    arr_f[1] = 3.14;
    arr_b[2] = false;

    arr_b[3] = usingparameters(i, arr_b[2]);
    
    let mut add_res: i32 = 1 + 2;
    let mut sub_res: i32 = 10 - 5;
    let mut mul_res: i32 = 3 * 4;
    let mut div_res: i32 = 15 / 3;
    let mut mixed_ops: f32 = 1.5 + 2.5 * 3.0 - 1.0;

    let mut eq_res: bool = 1 == 1;
    let mut ne_res: bool = 1 != 2;
    let mut lt_res: bool = 5 < 10;
    let mut le_res: bool = 5 <= 5;
    let mut gt_res: bool = 10 > 5;
    let mut ge_res: bool = 10 >= 10;
    let mut not_res: bool = !false;
    let mut and_res: bool = true && false;
    let mut or_res: bool = true || false;

    if (i > 5) {
        println!(i);
    }
    
    if (f == 2.5) {
        println!(f);
    } else {
        println!(-2.5);
    }

    let mut counter: i32 = 0;
    while (counter < 3) {
        println!(counter);
        counter = counter + 1;
    }

    for mut j in 0..4 {
        println!(j);
    }

    let mut user_input_i: i32;
    input!(user_input_i);
    println!(user_input_i);

    let mut arr_access_res: i32 = arr_i[0] + arr_i[4];
    println!(arr_access_res);
}
